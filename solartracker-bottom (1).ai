%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Salman Ayub) ()
%%Title: (solartracker-bottom \(1\).ai)
%%CreationDate: 4/13/2018 4:08 PM
%%Canvassize: 16383
%%BoundingBox: -406 212 688 671
%%HiResBoundingBox: -405.2451 212.791 687.4707 670.0562
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: -0.5 0.5 611.5 792.5
%AI3_DocumentPreview: None
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 0
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -591 851 1 1793 886 26 0 0 64 131 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 56 8
%%BeginData: 5512 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FD40FFA8FD41FFA8FFFFFFA8A8A8FD09FFA8A8A8FD09FF
%A8FFA8FD09FFA8FFA8FD64FFA8FFFFFFA8FD07FFA8FFFFFFA8FD07FFA8FF
%FFFFA8FD12FFA8FD41FFA8FFFFA8FD04FFA8A8FD04FFA8FD05FFA8FD05FF
%A8FD05FFA8FD05FFA8FD05FFA8FD40FFA9FFA9FD05FFA9FFA9FD0BFFA8FD
%05FFA8FD05FFA8FD05FFA8FD05FFA8FD04FFA8FD05FFA8FD04FFA8FD12FF
%A8FD09FFA8FD0FFFA8FD13FFA9FFFFA9FFA9A9FFA9FFFFA9FD05FF7D7DFF
%A8FFFFFFA8FFA8FFA8FD06FFA8A8FFA8FFA8FD06FFFD04A8FFA8FD05FFA8
%FFA8A8FFA8A8FD1AFFA8FFA8FD0DFFA8FFA8FD13FFA9FD07FFA9FFFFFFA8
%FFFFFF52A8FD04FFA8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FFA8FFFFA8
%FD04FFA8A8FFFFA8FFA8A8FD11FFA8FD07FFA8FFFFA8FD0CFFA8A8FFA8A8
%FD1EFFA87DA8FF7D52FFA8FFA8FD06FFA8A8FFFFFFA8FD05FFA8A8FD04FF
%A8FD05FFA8FD04FFA8A8FD05FFA8FD1AFFA8FD31FFA87DA8FF7DA8FD04FF
%A8FD05FFA8FD0BFFA8FD0FFFA8FD18FFA8FD05FFA8A8A8FD13FFA8FD1FFF
%7DA8FF7D7DFFA8FFA8FD06FFA8A8FFFFFFA8FD05FFA8A8FD04FFA8FD05FF
%A8FD04FFA8A8FD05FFA8FD18FFA8FD15FFA8FD1DFFA8A8A8FF7DA8FD04FF
%A8FFA8A8A8FFA8FD07FFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FD14FFA8FFFFFFA8FD1BFFA8FD1BFF7DFD04A8FFA8FFA8FFFFA8A8A8FF
%FFA8FFFFFFA8FFA8A8A8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFFFFFA8FFFF
%FFA8FFA8FFA8FD14FFA8FFA8FD1BFFA8FD1AFF7DA8FFA8A8FD06FFA8FFA8
%FD0BFFA8FD05FFA8FD05FFA8FFA8FFFFFFA8FFA8FFFFA8FFFFA8FD10FFA8
%FD05FFA8FD17FFA8FFA8A8FD18FFA8A87DA8FFA8A8FFA8FFA8FFA8FFFFA8
%FFFFA8FD05FFA8FFA8A8FFFFA8FFA8FFFFFFA8FFA8FFFFFFA8FFA8FFFFFF
%A8FFA8FD32FFA8FD0FFFA9FFFFFFA9FFFFFFA9FFFFFF7DA8A8FF7DFFFFFF
%A8FFFFFFA8FFA8FFFFFFA8FFA8FFFFFFA8FFA8FD05FFA8FFFFA8A8FD0AFF
%A8A8FFFFFFA8FD10FFA8FD2DFFFD04A9FFA97FFFFD04A9FD04FF7D7DA8FF
%A8FFFFA8A8FFA8FFA8A8A8FFFFA8FFA8A8FFA8FFA8FFA8FFA8FFA8A8A8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FD3EFFA9FD07FFA9FD0BFFA8FF
%A8FD05FFA8FFA8FFA8FFA8FD07FFA8FD26FFA8FD41FFA8FFA8FD06FFA8A8
%FFFFA8A8FD05FFA8A8A8FFA8A8A8FD05FFA8A8A8FFA8A8A8FD05FFA8A8A8
%FD8FFFA8FD41FFA8FD8EFFA8FD2EFFA8FD3CFFA8A8FFFFFFA8FD0BFFA8FF
%A8FFA8FD05FFA8FFA8FD72FFA8FD05FFA8FFFFFFA8FFFFFFA8FFA8FD22FF
%A8FD2BFFA8FD15FFA8FD09FFA8FD05FFA8FFA8FFA8FFA8FD05FFA8FD11FF
%A8FD07FFA8FFA8FD50FFA8FD13FFA8FD20FFA8FD41FFA8FD07FFA8FD08FF
%A8A8FFA8FD09FFA8FD12FFA8A8FFFFA8FFFFFFA8FD65FFA8FD11FFA8FFFF
%FFA8FD08FFA8FD41FFA8FD05FFA8FD0BFFA8A8A8FD0BFFA8FD0BFFA8FFFF
%A9A9FFA8FFA8FFA9A9FFFFA8FD4AFFA8FD0DFFA8FD0DFFA8FD09FFA8FFFF
%FFA9FD07FFA9FFFFFFA8FFFFA8FD05FFA8FD17FFA8FFA8FD21FFA8FFFFFF
%A8FD07FFA8FD15FFA8FD07FFA8FFFFA8A8FFFFFFA8FFA8FFFFFFA8FFFFFF
%A8FD04FFA8FFA8FD19FFA8FFA8FD2BFFA8FFA8FD1FFFA8FD0BFFA8FD04FF
%A8FFFFFFA8FD1BFFA8FD0BFFA8FD15FFA8FFFFFFA8FD05FFA8FFFFFFA8FD
%13FFA8FD06FFA8A8FFA8FFA8A8FFFFA8FFA8FFFFA8A8FFA8FFA8FD08FFA8
%FD15FFA8FD0EFFA8FD18FFA8FD07FFA8FFFFFFA8FD13FFA8FD05FFA8FD05
%FFA8FD07FFA8FD05FFA8A8FD05FFA8A8A8FD13FFA8FD0FFFA8FD15FFA8FF
%A8FD09FFA8FFA8FD19FFA8FD05FFA8FFFFFFA8FFA8FFFFFFA8FFA8FFFFA8
%FD09FFA8FD45FFA8FD15FFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFA8A8FFFF
%FFA8FFA8A8FD07FFA8FFA8FD0EFFA8FFFFA8FD25FFA8FFA8A8A8FD0DFFA8
%A8A8FD0DFFA8A8A8FFFFFFA8FFA8FD05FFA8FFA8FFA8FFA8FD05FFA8A8FD
%09FFA8FD0FFFA8FFA8FD2DFFA8FD0DFFA8FD09FFA8FFA8FD0FFFA8FD0BFF
%A8A8FD09FFA8FD0FFFA8FD21FFA8FD05FFA8FFFFFFA8A8A8FFA8FD07FFA8
%FFFFFFA8FD07FFA8FFA8FFA8FD5AFFA8FD09FFA8FFFFFFA8FD0BFFA8FD07
%FFA8FFFFFFA8FD1CFFA8FD41FFA8FFFFFFFD05A8FD05FFA8FD05FFA8FD09
%FFFD05A8FD60FFA8A8FD1CFFA8FFA8FD1AFFA8FD41FFA8FFA8FD0BFFA8FF
%FFFFA8FD10FFA8FD1BFFA8FD3FFFA8FD0FFFA8FD13FFA8FD1CFFA8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FD05FF
%A8FD0BFFA8FFA8FD12FFA8A8FD5EFFA8FD1FFFA8FD60FFA8FD1DFFA8FDE1
%FFA8FD1CFFA8A8FD62FFA8FD0DFFA8FD0DFFA8FD64FFA8FD0BFFA8FFA8FD
%0BFFA8FD66FFA8FD09FFA8FD0DFFA8FD68FFA8FD09FFA8FFA8FD09FFA8FD
%6AFFA8FD09FFA8FD09FFA8FD6CFFA8FD05FFA8FFA8FFA8A8FD06FFA8FD70
%FFA8FD07FFA8FFFFFFA8FD74FFA8FFA8FD05FFA8FFA8FD24FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (Swatch Libraries.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
0 R
0.75021 0.679683 0.670222 0.90164 0 0 0 XA
0 J 2 j 0.003 w 4 M []0 d0 XR
-405.2437 641.708 m
-405.2437 344.0703 L
S
-378.4907 563.0425 m
-365.7627 575.7705 L
S
-331.0864 610.4463 m
-318.3584 623.1748 L
S
-365.7627 550.3149 m
-353.0342 563.0425 L
S
-318.3584 597.7192 m
-305.6304 610.4463 L
S
-318.3584 362.6035 m
-331.0864 375.3311 L
S
1 D
-365.7627 410.0073 m
-378.4907 422.7344 L
S
0 D
-305.6304 375.3311 m
-318.3584 388.0586 L
S
-353.0342 422.7344 m
-365.7627 435.4629 L
S
-365.7627 435.4629 m
-378.4907 422.7344 L
S
-190.7788 610.4463 m
-178.0508 623.1748 L
S
-165.3223 610.4463 m
-178.0508 597.7192 L
S
-353.0342 422.7344 m
-365.7627 410.0073 L
S
-331.0864 375.3311 m
-318.3584 388.0586 L
S
-143.3745 563.0425 m
-130.6465 575.7705 L
S
-305.6304 375.3311 m
-318.3584 362.6035 L
S
-130.6465 550.3149 m
-117.9185 563.0425 L
S
294.6304 212.793 m
301.7173 212.793 L
S
344.2363 212.793 m
351.3232 212.793 L
S
344.2363 230.793 m
329.2129 230.793 L
S
316.7402 230.793 m
301.7173 230.793 L
S
1 D
-190.7788 375.3311 m
-178.0508 362.6035 L
S
0 D
-365.7627 550.3149 m
-378.4907 563.0425 L
S
-365.7627 575.7705 m
-353.0342 563.0425 L
S
-178.0508 388.0586 m
-165.3223 375.3311 L
S
310.2207 244.9668 m
316.7402 244.9668 L
S
329.2129 244.9668 m
335.7324 244.9668 L
S
310.2207 256.3047 m
316.7402 256.3047 L
S
329.2129 256.3047 m
335.7324 256.3047 L
S
-130.6465 435.4629 m
-143.3745 422.7344 L
S
-178.0508 388.0586 m
-190.7788 375.3311 L
S
316.7402 269.6279 m
329.2129 269.6279 L
S
1 D
-130.6465 410.0073 m
-143.3745 422.7344 L
S
0 D
-318.3584 597.7192 m
-331.0864 610.4463 L
S
-130.6465 435.4629 m
-117.9185 422.7344 L
S
-305.6304 610.4463 m
-318.3584 623.1748 L
S
-117.9185 422.7344 m
-130.6465 410.0073 L
S
-165.3223 375.3311 m
-178.0508 362.6035 L
S
-376.8975 315.7236 m
133.3389 315.7236 L
S
*u
464.709 333.2656 m
464.709 333.2656 L
S
464.709 333.2656 m
446.709 333.2656 L
S
*U
181.2446 333.2656 m
199.2446 333.2656 L
S
432.5361 341.7695 m
421.1973 341.7695 L
S
213.418 341.7695 m
224.7563 341.7695 L
S
*u
446.709 348.2891 m
446.709 348.2891 L
S
446.709 348.2891 m
432.5352 348.2891 L
S
*U
421.1973 348.2891 m
407.875 348.2891 L
S
199.2446 348.2891 m
213.418 348.2891 L
S
224.7563 348.2891 m
238.0791 348.2891 L
S
*u
446.709 360.7617 m
446.709 360.7617 L
S
446.709 360.7617 m
432.5352 360.7617 L
S
*U
421.1973 360.7617 m
407.875 360.7617 L
S
199.2446 360.7617 m
213.418 360.7617 L
S
224.7563 360.7617 m
238.0791 360.7617 L
S
432.5361 367.2813 m
421.1973 367.2813 L
S
213.418 367.2813 m
224.7563 367.2813 L
S
-190.7788 610.4463 m
-178.0508 597.7192 L
S
-143.3745 563.0425 m
-130.6465 550.3149 L
S
*u
464.709 375.7852 m
464.709 375.7852 L
S
464.709 375.7852 m
446.709 375.7852 L
S
*U
181.2446 375.7852 m
199.2446 375.7852 L
S
-178.0508 623.1748 m
-165.3223 610.4463 L
S
-130.6465 575.7705 m
-117.9185 563.0425 L
S
329.2129 439.4229 m
316.7402 439.4229 L
S
335.7324 452.7456 m
329.2129 452.7456 L
S
316.7402 452.7456 m
310.2207 452.7456 L
S
335.7324 464.0845 m
329.2129 464.0845 L
S
316.7402 464.0845 m
310.2207 464.0845 L
S
301.7173 478.2573 m
316.7402 478.2573 L
S
329.2129 478.2573 m
344.2363 478.2573 L
S
184.646 586.9888 m
170.4727 544.4692 L
S
351.3232 496.2573 m
344.2363 496.2573 L
S
301.7173 496.2573 m
294.6304 496.2573 L
S
276.8755 332.4766 m
300.9282 308.4238 L
S
161.6851 344.0703 m
161.6851 641.708 L
S
170.4727 544.4692 m
170.4727 526.4692 L
S
181.2446 382.8721 m
181.2446 375.7852 L
S
181.2446 333.2656 m
181.2446 326.1787 L
S
184.646 615.8032 m
184.646 586.9888 L
S
*u
553.1494 526.4692 m
553.1494 526.4692 L
S
553.1494 526.4692 m
535.1494 526.4692 L
S
*U
*u
486.1104 526.4692 m
486.1104 526.4692 L
S
486.1104 526.4692 m
468.1104 526.4692 L
S
*U
*u
453.9375 526.4692 m
453.9375 526.4692 L
S
453.9375 526.4692 m
435.9375 526.4692 L
S
*U
386.8984 526.4692 m
368.8984 526.4692 L
S
354.7246 526.4692 m
336.7246 526.4692 L
S
287.6851 526.4692 m
269.6851 526.4692 L
S
255.5117 526.4692 m
237.5117 526.4692 L
S
188.4727 526.4692 m
170.4727 526.4692 L
S
188.4727 544.4692 m
206.7563 544.4692 L
S
219.229 544.4692 m
237.5117 544.4692 L
S
287.6851 544.4692 m
305.9688 544.4692 L
S
318.4414 544.4692 m
336.7246 544.4692 L
S
386.8984 544.4692 m
405.1807 544.4692 L
S
417.6533 544.4692 m
435.9375 544.4692 L
S
*u
504.3936 544.4692 m
504.3936 544.4692 L
S
486.1104 544.4692 m
504.3936 544.4692 L
S
*U
*u
535.1494 544.4692 m
535.1494 544.4692 L
S
516.8662 544.4692 m
535.1494 544.4692 L
S
*U
246.8091 410.6479 m
272.8667 384.5908 L
S
188.4727 544.4692 m
188.4727 526.4692 L
S
191.7329 633.8032 m
191.7329 615.8032 L
S
199.2446 333.2656 m
199.2446 348.2891 L
S
199.2446 360.7617 m
199.2446 375.7852 L
S
200.2368 558.6426 m
200.2368 569.981 L
S
206.7563 544.4692 m
206.7563 558.6426 L
S
206.7563 569.981 m
206.7563 583.3042 L
S
213.418 367.2813 m
213.418 360.7617 L
S
213.418 348.2891 m
213.418 341.7695 L
S
219.229 544.4692 m
219.229 558.6426 L
S
219.229 569.981 m
219.229 583.3042 L
S
266.8535 430.6919 m
246.8091 410.6479 L
S
200.2368 558.6426 m
206.7563 558.6426 L
S
219.229 558.6426 m
225.7485 558.6426 L
S
299.4492 558.6426 m
305.9688 558.6426 L
S
318.4414 558.6426 m
324.9609 558.6426 L
S
398.6611 558.6426 m
405.1807 558.6426 L
S
417.6533 558.6426 m
424.1729 558.6426 L
S
*u
504.3936 558.6426 m
504.3936 558.6426 L
S
497.874 558.6426 m
504.3936 558.6426 L
S
*U
*u
523.3857 558.6426 m
523.3857 558.6426 L
S
516.8662 558.6426 m
523.3857 558.6426 L
S
*U
200.2368 569.981 m
206.7563 569.981 L
S
219.229 569.981 m
225.7485 569.981 L
S
299.4492 569.981 m
305.9688 569.981 L
S
318.4414 569.981 m
324.9609 569.981 L
S
398.6611 569.981 m
405.1807 569.981 L
S
417.6533 569.981 m
424.1729 569.981 L
S
*u
504.3936 569.981 m
504.3936 569.981 L
S
497.874 569.981 m
504.3936 569.981 L
S
*U
*u
523.3857 569.981 m
523.3857 569.981 L
S
516.8662 569.981 m
523.3857 569.981 L
S
*U
206.7563 583.3042 m
219.229 583.3042 L
S
305.9688 583.3042 m
318.4414 583.3042 L
S
405.1807 583.3042 m
417.6533 583.3042 L
S
*u
516.8662 583.3042 m
516.8662 583.3042 L
S
504.3936 583.3042 m
516.8662 583.3042 L
S
*U
1 D
292.9106 404.6353 m
266.8535 430.6919 L
S
0 D
347.0293 354.5254 m
322.9766 378.5781 L
S
224.7563 367.2813 m
224.7563 360.7617 L
S
224.7563 348.2891 m
224.7563 341.7695 L
S
225.7485 558.6426 m
225.7485 569.981 L
S
234.2524 615.8032 m
234.2524 633.8032 L
S
237.5117 544.4692 m
237.5117 526.4692 L
S
238.0791 360.7617 m
238.0791 348.2891 L
S
241.3389 586.9888 m
241.3389 615.8032 L
S
255.5117 544.4692 m
255.5117 526.4692 L
S
283.8589 586.9888 m
269.6851 544.4692 L
S
272.8667 384.5908 m
292.9106 404.6353 L
S
184.646 615.8032 m
191.7329 615.8032 L
S
234.2524 615.8032 m
241.3389 615.8032 L
S
283.8589 615.8032 m
290.9453 615.8032 L
S
333.4648 615.8032 m
340.5518 615.8032 L
S
383.0713 615.8032 m
390.1572 615.8032 L
S
432.6768 615.8032 m
439.7637 615.8032 L
S
*u
489.3701 615.8032 m
489.3701 615.8032 L
S
482.2832 615.8032 m
489.3701 615.8032 L
S
*U
*u
538.9766 615.8032 m
538.9766 615.8032 L
S
531.8896 615.8032 m
538.9766 615.8032 L
S
*U
269.6851 544.4692 m
269.6851 526.4692 L
S
283.8589 615.8032 m
283.8589 586.9888 L
S
287.6851 544.4692 m
287.6851 526.4692 L
S
290.9453 633.8032 m
290.9453 615.8032 L
S
185.2275 633.8032 m
191.7329 633.8032 L
S
234.2524 633.8032 m
240.7578 633.8032 L
S
284.4399 633.8032 m
290.9453 633.8032 L
S
333.4648 633.8032 m
339.9697 633.8032 L
S
383.6523 633.8032 m
390.1572 633.8032 L
S
432.6768 633.8032 m
439.1826 633.8032 L
S
*u
489.3701 633.8032 m
489.3701 633.8032 L
S
482.8652 633.8032 m
489.3701 633.8032 L
S
*U
*u
538.3945 633.8032 m
538.3945 633.8032 L
S
531.8896 633.8032 m
538.3945 633.8032 L
S
*U
*u
521.9688 654.0708 m
521.9688 654.0708 L
S
521.9688 654.0708 m
499.291 654.0708 L
S
*U
422.7559 654.0708 m
400.0791 654.0708 L
S
323.5439 654.0708 m
300.8667 654.0708 L
S
224.3306 654.0708 m
201.6538 654.0708 L
S
255.5117 544.4692 m
241.3389 586.9888 L
S
299.4492 558.6426 m
299.4492 569.981 L
S
301.7173 496.2573 m
301.7173 478.2573 L
S
301.7173 212.793 m
301.7173 230.793 L
S
305.9688 544.4692 m
305.9688 558.6426 L
S
305.9688 569.981 m
305.9688 583.3042 L
S
310.2207 464.0845 m
310.2207 452.7456 L
S
310.2207 244.9668 m
310.2207 256.3047 L
S
316.7402 478.2573 m
316.7402 464.0845 L
S
316.7402 452.7456 m
316.7402 439.4229 L
S
316.7402 230.793 m
316.7402 244.9668 L
S
316.7402 256.3047 m
316.7402 269.6279 L
S
318.4414 544.4692 m
318.4414 558.6426 L
S
318.4414 569.981 m
318.4414 583.3042 L
S
324.9609 558.6426 m
324.9609 569.981 L
S
383.0713 586.9888 m
368.8984 544.4692 L
S
322.9766 378.5781 m
276.8755 332.4766 L
S
133.3389 670.0547 m
-376.8975 670.0547 L
S
329.2129 478.2573 m
329.2129 464.0845 L
S
329.2129 452.7456 m
329.2129 439.4229 L
S
329.2129 230.793 m
329.2129 244.9668 L
S
329.2129 256.3047 m
329.2129 269.6279 L
S
333.4648 615.8032 m
333.4648 633.8032 L
S
335.7324 464.0845 m
335.7324 452.7456 L
S
335.7324 244.9668 m
335.7324 256.3047 L
S
336.7246 544.4692 m
336.7246 526.4692 L
S
340.5518 586.9888 m
340.5518 615.8032 L
S
344.2363 496.2573 m
344.2363 478.2573 L
S
344.2363 212.793 m
344.2363 230.793 L
S
354.7246 544.4692 m
354.7246 526.4692 L
S
300.9282 308.4238 m
347.0293 354.5254 L
S
368.8984 544.4692 m
368.8984 526.4692 L
S
383.0713 615.8032 m
383.0713 586.9888 L
S
386.8984 544.4692 m
386.8984 526.4692 L
S
390.1572 633.8032 m
390.1572 615.8032 L
S
354.7246 544.4692 m
340.5518 586.9888 L
S
398.6611 558.6426 m
398.6611 569.981 L
S
405.1807 544.4692 m
405.1807 558.6426 L
S
405.1807 569.981 m
405.1807 583.3042 L
S
407.875 348.2891 m
407.875 360.7617 L
S
417.6533 544.4692 m
417.6533 558.6426 L
S
417.6533 569.981 m
417.6533 583.3042 L
S
421.1973 341.7695 m
421.1973 348.2891 L
S
421.1973 360.7617 m
421.1973 367.2813 L
S
424.1729 558.6426 m
424.1729 569.981 L
S
432.5361 341.7695 m
432.5361 348.2891 L
S
432.5361 360.7617 m
432.5361 367.2813 L
S
*u
482.2842 586.9888 m
482.2842 586.9888 L
S
482.2842 586.9888 m
468.1104 544.4692 L
S
*U
432.6768 615.8032 m
432.6768 633.8032 L
S
435.9375 544.4692 m
435.9375 526.4692 L
S
*u
439.7637 615.8032 m
439.7637 615.8032 L
S
439.7637 586.9888 m
439.7637 615.8032 L
S
*U
*u
446.709 375.7852 m
446.709 375.7852 L
S
446.709 375.7852 m
446.709 360.7617 L
S
*U
*u
446.709 348.2891 m
446.709 348.2891 L
S
446.709 348.2891 m
446.709 333.2656 L
S
*U
*u
453.9375 544.4692 m
453.9375 544.4692 L
S
453.9375 544.4692 m
453.9375 526.4692 L
S
*U
*u
464.709 333.2656 m
464.709 333.2656 L
S
464.709 326.1787 m
464.709 333.2656 L
S
*U
*u
464.709 382.8721 m
464.709 382.8721 L
S
464.709 375.7852 m
464.709 382.8721 L
S
*U
453.9375 544.4692 m
439.7637 586.9888 L
S
*u
468.1104 544.4692 m
468.1104 544.4692 L
S
468.1104 544.4692 m
468.1104 526.4692 L
S
*U
*u
482.2842 615.8032 m
482.2842 615.8032 L
S
482.2842 615.8032 m
482.2842 586.9888 L
S
*U
*u
486.1104 544.4692 m
486.1104 544.4692 L
S
486.1104 544.4692 m
486.1104 526.4692 L
S
*U
*u
489.3701 633.8032 m
489.3701 633.8032 L
S
489.3701 633.8032 m
489.3701 615.8032 L
S
*U
*u
497.874 569.981 m
497.874 569.981 L
S
497.874 558.6426 m
497.874 569.981 L
S
*U
*u
504.3936 558.6426 m
504.3936 558.6426 L
S
504.3936 544.4692 m
504.3936 558.6426 L
S
*U
*u
504.3936 583.3042 m
504.3936 583.3042 L
S
504.3936 569.9814 m
504.3936 583.3042 L
S
*U
*u
516.8662 558.6426 m
516.8662 558.6426 L
S
516.8662 544.4692 m
516.8662 558.6426 L
S
*U
*u
516.8662 583.3042 m
516.8662 583.3042 L
S
516.8662 569.9814 m
516.8662 583.3042 L
S
*U
*u
523.3857 569.981 m
523.3857 569.981 L
S
523.3857 558.6426 m
523.3857 569.981 L
S
*U
*u
531.8896 633.8032 m
531.8896 633.8032 L
S
531.8896 615.8032 m
531.8896 633.8032 L
S
*U
*u
535.1494 544.4692 m
535.1494 544.4692 L
S
535.1494 544.4692 m
535.1494 526.4692 L
S
*U
*u
538.9766 615.8032 m
538.9766 615.8032 L
S
538.9766 586.9888 m
538.9766 615.8032 L
S
*U
*u
553.1494 544.4692 m
553.1494 544.4692 L
S
553.1494 544.4692 m
553.1494 526.4692 L
S
*U
553.1494 544.4692 m
538.9766 586.9888 L
S
1 D
-405.2437 344.0703 m
-405.2437 336.5527 -402.2573 329.3428 -396.9414 324.0264 C
-391.625 318.71 -384.415 315.7236 -376.897 315.7236 C
S
-335.8242 399.0332 m
-335.8242 402.4771 -338.6162 405.269 -342.0605 405.269 c
-345.5044 405.269 -348.2964 402.4771 -348.2964 399.0332 c
-348.2964 395.5889 -345.5044 392.7969 -342.0605 392.7969 c
-338.6162 392.7969 -335.8242 395.5889 -335.8242 399.0332 c
s
-148.1123 399.0332 m
-148.1123 402.4771 -150.9043 405.269 -154.3486 405.269 c
-157.793 405.269 -160.5845 402.4771 -160.5845 399.0332 c
-160.5845 395.5889 -157.793 392.7969 -154.3486 392.7969 c
-150.9043 392.7969 -148.1123 395.5889 -148.1123 399.0332 C
-148.1123 399.0332 L
s
-376.8975 670.0547 m
-384.415 670.0547 -391.625 667.0679 -396.9414 661.752 c
-402.2573 656.436 -405.2437 649.2261 -405.2437 641.708 C
S
-335.8242 586.7451 m
-335.8242 590.1895 -338.6162 592.981 -342.0605 592.981 c
-345.5044 592.981 -348.2964 590.1895 -348.2964 586.7451 c
-348.2964 583.3008 -345.5044 580.5088 -342.0605 580.5088 C
-338.6162 580.5088 -335.8242 583.3008 -335.8242 586.7451 c
s
-148.1123 586.7451 m
-148.1123 590.1895 -150.9043 592.981 -154.3486 592.981 c
-157.793 592.981 -160.5845 590.1895 -160.5845 586.7451 c
-160.5845 583.3008 -157.793 580.5088 -154.3486 580.5088 C
-150.9043 580.5088 -148.1123 583.3008 -148.1123 586.7451 C
-148.1123 586.7451 L
s
-20.4478 401.5225 m
-20.4478 404.0078 -22.4624 406.0225 -24.9478 406.0225 c
-27.4326 406.0225 -29.4478 404.0078 -29.4478 401.5225 c
-29.4478 399.0376 -27.4326 397.0225 -24.9478 397.0225 c
-22.4624 397.0225 -20.4478 399.0376 -20.4478 401.5225 c
s
-20.4478 480.7227 m
-20.4478 483.208 -22.4624 485.2227 -24.9478 485.2227 c
-27.4326 485.2227 -29.4478 483.208 -29.4478 480.7227 c
-29.4478 478.2378 -27.4326 476.2227 -24.9478 476.2227 c
-22.4624 476.2227 -20.4478 478.2378 -20.4478 480.7227 c
s
294.6304 496.2573 m
237.4126 484.8135 192.6875 440.0889 181.2446 382.8721 C
S
181.2446 326.1787 m
192.688 268.9609 237.4126 224.2363 294.6304 212.793 C
S
351.3232 212.793 m
408.54 224.2373 453.2646 268.9619 464.709 326.1787 C
S
464.709 382.8721 m
453.2646 440.0894 408.54 484.814 351.3232 496.2573 C
S
133.3389 315.7236 m
140.8564 315.7236 148.0664 318.71 153.3828 324.0264 C
158.6987 329.3428 161.6851 336.5527 161.6851 344.0703 C
S
287.52 316.9434 m
287.52 318.1172 286.5684 319.0693 285.394 319.0693 c
284.2202 319.0693 283.2681 318.1172 283.2681 316.9434 c
283.2681 315.7686 284.2202 314.8164 285.394 314.8164 c
286.5684 314.8164 287.52 315.7686 287.52 316.9434 c
s
340.6367 370.0596 m
340.6367 371.2334 339.6846 372.1855 338.5107 372.1855 c
337.3359 372.1855 336.3848 371.2334 336.3848 370.0596 c
336.3848 368.8857 337.3359 367.9336 338.5107 367.9336 c
339.6846 367.9336 340.6367 368.8857 340.6367 370.0596 c
s
201.6538 654.0708 m
193.21 650.3857 187.084 642.8271 185.2271 633.8027 C
S
240.7578 633.8032 m
238.9014 642.8276 232.7749 650.3862 224.3315 654.0713 C
S
300.8667 654.0708 m
292.4229 650.3857 286.2969 642.8271 284.4404 633.8027 C
S
339.9697 633.8032 m
338.1133 642.8276 331.9873 650.3862 323.5439 654.0713 C
S
400.0791 654.0708 m
391.6357 650.3857 385.5098 642.8271 383.6523 633.8027 C
S
439.1826 633.8032 m
437.3262 642.8276 431.2002 650.3862 422.7568 654.0713 C
S
499.292 654.0708 m
490.8477 650.3857 484.7217 642.8271 482.8652 633.8027 C
S
538.3945 633.8032 m
536.5381 642.8276 530.4121 650.3862 521.9688 654.0713 C
S
161.6851 641.708 m
161.6851 649.2261 158.6982 656.436 153.3828 661.752 C
148.0664 667.0684 140.8564 670.0547 133.3384 670.0547 C
S
219.229 624.8032 m
219.229 628.2476 216.4365 631.0396 212.9927 631.0396 c
209.5483 631.0396 206.7563 628.2476 206.7563 624.8032 c
206.7563 621.3594 209.5483 618.5674 212.9927 618.5674 c
216.4365 618.5674 219.229 621.3594 219.229 624.8032 c
s
318.4414 624.8032 m
318.4414 628.2476 315.6494 631.0396 312.2051 631.0396 c
308.7607 631.0396 305.9688 628.2476 305.9688 624.8032 c
305.9688 621.3594 308.7607 618.5674 312.2051 618.5674 c
315.6494 618.5674 318.4414 621.3594 318.4414 624.8032 c
s
417.6533 624.8032 m
417.6533 628.2476 414.8613 631.0396 411.418 631.0396 c
407.9736 631.0396 405.1816 628.2476 405.1816 624.8032 c
405.1816 621.3594 407.9727 618.5674 411.418 618.5674 c
414.8613 618.5674 417.6533 621.3594 417.6533 624.8032 c
s
516.8662 624.8032 m
516.8662 628.2476 514.0742 631.0396 510.6299 631.0396 c
507.1855 631.0396 504.3936 628.2476 504.3936 624.8032 c
504.3936 621.3594 507.1855 618.5674 510.6299 618.5674 c
514.0742 618.5674 516.8662 621.3594 516.8662 624.8032 c
s
125.7124 492.2427 m
125.7124 494.728 123.6978 496.7427 121.2124 496.7427 c
118.7271 496.7427 116.7124 494.728 116.7124 492.2427 c
116.7124 489.7578 118.7271 487.7427 121.2124 487.7427 c
123.6978 487.7427 125.7124 489.7578 125.7124 492.2427 c
s
119.2324 357.6025 m
119.2324 360.0879 117.2178 362.1025 114.7324 362.1025 c
112.2471 362.1025 110.2324 360.0879 110.2324 357.6025 c
110.2324 355.1172 112.2471 353.1025 114.7324 353.1025 c
117.2178 353.1025 119.2324 355.1172 119.2324 357.6025 c
s
*u
0 D
0.67953 0.668177 0.681147 0.783474 0.121569 0.101961 0.090196 XA
0 j111.3003 558.2212 m
110.6196 557.5454 109.9619 556.4902 109.3179 555.0659 C
108.4595 553.1387 107.7104 551.8188 107.0713 551.1064 C
106.4272 550.3896 105.4272 550.0332 104.0713 550.0332 c
103.0024 550.0332 101.9839 550.481 101.0249 551.3716 C
100.0615 552.2666 99.5776 553.5313 99.5776 555.1709 c
99.5776 555.8877 99.7007 556.5635 99.9521 557.2075 C
100.2031 557.8467 100.3262 558.3125 100.3262 558.5957 c
100.3262 558.8105 100.2715 559.0068 100.167 559.1846 C
100.0615 559.3628 99.8652 559.5225 99.5776 559.6689 C
103.9663 560.0938 L
104.1807 559.5596 L
102.6826 558.9199 101.6646 558.2578 101.1299 557.582 C
100.5962 556.9014 100.3262 556.0293 100.3262 554.9561 c
100.3262 553.6045 100.7012 552.6729 101.4497 552.1748 C
102.1987 551.6772 103.0024 551.4263 103.8608 551.4263 c
104.6421 551.4263 105.2676 551.6592 105.7334 552.1201 C
106.1943 552.5859 106.8931 553.8511 107.8203 555.9199 C
108.5327 557.6318 109.3364 558.8652 110.2266 559.6143 C
111.1172 560.3633 112.1724 560.7378 113.3867 560.7378 c
114.6704 560.7378 115.812 560.29 116.812 559.3994 C
117.8076 558.5093 118.3096 557.2075 118.3096 555.4951 c
118.3096 554.7783 118.1816 554.1206 117.9351 553.5132 C
117.6846 552.9058 117.561 552.4263 117.561 552.0703 c
117.561 551.8555 117.6299 551.6406 117.771 551.4263 C
117.9175 551.2114 118.0952 550.9604 118.3096 550.6772 C
113.0625 549.8184 L
112.8481 550.4629 L
114.6338 550.9604 115.8667 551.6592 116.5425 552.5498 C
117.2188 553.4399 117.561 554.4585 117.561 555.6001 c
117.561 556.8149 117.2002 557.7231 116.4878 558.3311 C
115.7754 558.9336 114.7388 559.2397 113.3867 559.2397 c
112.6699 559.2397 111.9761 558.9019 111.3003 558.2212 C
s
107.8203 573.2593 m
109.1035 574.2598 110.5327 574.7578 112.0991 574.7578 c
113.8843 574.7578 115.3643 574.2231 116.5425 573.1543 C
117.7207 572.0811 118.3096 570.7612 118.3096 569.1953 c
118.3096 567.5508 117.7021 566.2134 116.4878 565.1812 C
115.2773 564.1445 113.8115 563.6284 112.0991 563.6284 c
110.5327 563.6284 109.1035 564.1445 107.8203 565.1812 C
106.5371 566.2134 105.8931 567.5508 105.8931 569.1953 c
105.8931 570.9077 106.5371 572.2593 107.8203 573.2593 C
s
1 D
107.9805 566.519 m
108.9438 565.7339 110.3501 565.3408 112.209 565.3408 c
114.063 565.3408 115.4375 565.7153 116.3281 566.4644 C
117.2188 567.2129 117.666 568.1221 117.666 569.1953 c
117.666 570.4053 117.1865 571.3506 116.2227 572.0308 C
115.2593 572.707 113.9209 573.0449 112.209 573.0449 c
110.3501 573.0449 108.9438 572.6704 107.9805 571.9214 C
107.0166 571.1724 106.5371 570.2637 106.5371 569.1953 c
106.5371 568.1953 107.0166 567.3047 107.9805 566.519 C
s
0 D
99.792 578.8262 m
99.792 580.0044 L
99.792 580.6436 99.7192 581.251 99.5776 581.8223 C
99.436 582.3931 99.2217 582.9272 98.9336 583.4297 C
98.9336 583.644 L
116.5977 583.644 L
116.8804 583.644 117.0952 583.7314 117.2368 583.9092 C
117.3833 584.0869 117.4512 584.3198 117.4512 584.6074 C
117.4512 587.0693 L
118.0952 587.0693 L
118.0952 578.7217 L
117.4512 578.7217 L
117.4512 581.1826 L
117.4512 581.5391 117.3833 581.7856 117.2368 581.9316 c
117.0952 582.0732 116.8804 582.1465 116.5977 582.1465 C
101.29 582.1465 L
101.0068 582.1465 100.7925 582.0732 100.646 581.9316 C
100.5049 581.7856 100.436 581.5391 100.436 581.1826 C
100.436 578.8262 L
99.792 578.8262 L
99.792 578.8262 L
s
117.8257 597.1797 m
118.0771 596.5771 118.2002 595.8467 118.2002 594.9878 c
118.2002 593.7046 117.8989 592.7041 117.2915 591.9922 C
116.6846 591.2798 115.9902 590.9189 115.2046 590.9189 c
113.9209 590.9189 112.8667 591.4717 112.0493 592.5811 C
111.2271 593.686 110.6377 595.8784 110.2817 599.1621 C
108.999 599.1621 L
108.2817 599.1621 107.6924 599.002 107.2314 598.6821 C
106.7651 598.3579 106.5371 597.6274 106.5371 596.4858 c
106.5371 595.2754 106.7334 594.417 107.1216 593.9194 C
107.5142 593.417 107.9253 593.2388 108.355 593.3804 C
108.6377 593.5264 108.9258 593.5264 109.209 593.3804 C
109.4961 593.2388 109.6377 592.9556 109.6377 592.5264 c
109.6377 592.2388 109.5508 592.0107 109.373 591.8325 C
109.1948 591.6543 108.9258 591.563 108.5693 591.563 c
107.9253 591.563 107.3179 592.0288 106.7471 592.9556 c
106.1763 593.8828 105.8931 595.0244 105.8931 596.3809 c
105.8931 597.8057 106.1626 598.8789 106.6973 599.5908 c
107.2314 600.3032 107.9985 600.6597 108.999 600.6597 C
116.0586 600.6597 L
116.6294 600.6597 116.9722 600.7144 117.0771 600.8193 C
117.1865 600.9292 117.2368 601.125 117.2368 601.4082 c
117.2368 601.7646 117.0771 602.0156 116.7573 602.1577 C
116.4375 602.3037 115.9902 602.3721 115.4194 602.3721 C
115.4194 602.9063 L
116.4194 602.9063 117.1133 602.728 117.5063 602.3721 C
117.8989 602.0156 118.0952 601.5547 118.0952 600.9839 c
118.0952 600.4814 117.9854 600.0889 117.771 599.8057 C
117.561 599.5181 117.2002 599.3032 116.7026 599.1621 C
117.2002 598.4492 117.5791 597.7871 117.8257 597.1797 C
117.8257 597.1797 L
s
1 D
112.3687 594.1338 m
113.0444 593.2021 113.8848 592.7407 114.8848 592.7407 c
115.5239 592.7407 116.1133 592.9375 116.6479 593.3301 C
117.1865 593.7227 117.4512 594.3438 117.4512 595.2026 c
117.4512 595.8467 117.3281 596.4858 117.0771 597.1294 C
116.8257 597.769 116.4512 598.4492 115.9536 599.1621 C
110.9209 599.1621 L
111.2085 596.7373 111.6885 595.061 112.3687 594.1338 C
s
0 D
105.5732 608.9023 m
109.4233 608.9023 L
108.2817 609.6152 107.4092 610.3818 106.8018 611.2041 C
106.1943 612.0215 105.8931 612.8618 105.8931 613.7207 c
105.8931 614.4326 106.0532 614.9854 106.3726 615.3779 C
106.6973 615.7705 107.0713 615.9673 107.4961 615.9673 c
107.8569 615.9673 108.1401 615.876 108.355 615.6978 C
108.5693 615.5195 108.6743 615.2549 108.6743 614.894 c
108.6743 614.5376 108.5693 614.2729 108.355 614.0952 C
108.1401 613.9165 107.8569 613.8623 107.4961 613.9307 C
107.2861 613.9307 107.1079 613.8984 106.9619 613.8257 C
106.8203 613.7524 106.7471 613.5425 106.7471 613.1816 c
106.7471 612.6108 107.1079 611.9165 107.8203 611.0947 C
108.5327 610.2773 109.5327 609.5469 110.8159 608.9023 C
116.5977 608.9023 L
116.8804 608.9023 117.0952 608.9893 117.2368 609.1675 C
117.3833 609.3501 117.4512 609.5786 117.4512 609.8662 C
117.4512 612.2178 L
118.0952 612.2178 L
118.0952 604.2993 L
117.4512 604.2993 L
117.4512 606.4409 L
117.4512 606.7974 117.3833 607.0483 117.2368 607.1904 C
117.0952 607.3315 116.8804 607.4048 116.5977 607.4048 C
107.7109 607.4048 L
107.4277 607.4048 107.1948 607.3315 107.0166 607.1904 C
106.8384 607.0483 106.7471 606.7974 106.7471 606.4409 C
106.7471 604.4092 L
106.1079 604.4092 L
106.1079 605.2632 L
106.1079 605.7607 106.0532 606.3496 105.9478 607.0303 C
105.8384 607.7061 105.7153 608.2222 105.5732 608.583 C
105.5732 608.9023 L
s
127.8359 544.3618 m
127.8359 544.042 L
127.1919 544.042 L
127.1919 547.896 L
127.8359 547.896 L
127.8359 547.4668 L
127.8359 547.1787 127.9409 546.9141 128.1558 546.6631 c
128.3701 546.4121 128.7632 546.2153 129.334 546.0737 C
145.4951 541.6855 L
145.4951 541.0459 L
129.334 537.082 L
128.8315 537.0137 128.457 536.8857 128.2104 536.7075 C
127.959 536.5293 127.8359 536.2651 127.8359 535.9087 C
127.8359 535.3701 L
127.1919 535.3701 L
127.1919 539.9731 L
127.8359 539.9731 L
127.8359 539.5435 L
127.8359 539.1875 127.9409 538.9546 128.1558 538.8496 C
128.3701 538.7446 128.6533 538.7261 129.0098 538.7949 C
141.5361 541.7949 L
141.5361 542.0049 L
129.334 545.2197 L
128.8315 545.3613 128.457 545.3613 128.2104 545.2197 C
127.959 545.0737 127.8359 544.7905 127.8359 544.3613 C
127.8359 544.3618 L
s
135.2202 559.5596 m
136.5034 560.5596 137.9326 561.0576 139.499 561.0576 c
141.2847 561.0576 142.7646 560.5229 143.9424 559.4546 C
145.1206 558.3809 145.7095 557.0615 145.7095 555.4951 c
145.7095 553.8511 145.1021 552.5132 143.8877 551.481 C
142.6772 550.4443 141.2119 549.9282 139.499 549.9282 c
137.9326 549.9282 136.5034 550.4443 135.2202 551.481 C
133.937 552.5132 133.293 553.8511 133.293 555.4951 c
133.293 557.2075 133.937 558.5591 135.2202 559.5596 C
135.2202 559.5596 L
s
1 D
135.3799 552.8193 m
136.3433 552.0337 137.75 551.6406 139.6089 551.6406 c
141.4629 551.6406 142.8374 552.0151 143.7275 552.7646 C
144.6182 553.5132 145.0659 554.4219 145.0659 555.4951 c
145.0659 556.7056 144.5864 557.6509 143.6226 558.3311 C
142.6592 559.0068 141.3213 559.3447 139.6089 559.3447 c
137.75 559.3447 136.3433 558.9702 135.3799 558.2212 C
134.4165 557.4727 133.937 556.5635 133.937 555.4951 c
133.937 554.4951 134.4165 553.6045 135.3799 552.8193 C
135.3799 552.8193 L
s
0 D
127.1919 565.1265 m
127.1919 566.3047 L
127.1919 566.9434 127.1191 567.5508 126.9771 568.1221 C
126.8359 568.6929 126.6211 569.2271 126.334 569.7295 C
126.334 569.9438 L
143.9976 569.9438 L
144.2803 569.9438 144.4951 570.0313 144.6367 570.209 C
144.7827 570.3872 144.8511 570.6201 144.8511 570.9077 C
144.8511 573.3691 L
145.4951 573.3691 L
145.4951 565.0215 L
144.8511 565.0215 L
144.8511 567.4824 L
144.8511 567.8389 144.7827 568.0854 144.6367 568.2314 c
144.4951 568.373 144.2803 568.4463 143.9976 568.4463 C
128.6899 568.4463 L
128.4067 568.4463 128.1924 568.373 128.0459 568.2314 C
127.9043 568.0854 127.8359 567.8389 127.8359 567.4824 C
127.8359 565.1265 L
127.1919 565.1265 L
127.1919 565.1265 L
s
134.1475 582.4663 m
142.0703 582.4663 L
143.0703 582.4663 143.7461 582.644 144.1021 583.0005 C
144.4585 583.3564 144.6367 583.8906 144.6367 584.6074 c
144.6367 585.3203 144.4082 585.8911 143.9424 586.3203 C
143.4766 586.7451 142.8193 587.0327 141.9604 587.1743 C
142.1753 587.7085 L
143.1758 587.5669 143.9976 587.1924 144.6367 586.585 C
145.2808 585.9775 145.6001 585.1787 145.6001 584.1782 c
145.6001 583.1055 145.2808 582.3062 144.6367 581.7676 C
143.9971 581.2329 142.9971 580.9678 141.6411 580.9678 C
134.147 580.9678 L
134.147 577.7578 L
133.5078 577.7578 L
133.5078 578.6118 L
133.5078 579.4707 133.2383 580.1646 132.7041 580.6987 C
132.1699 581.2329 131.3291 581.5752 130.188 581.7173 C
129.334 581.8223 L
129.334 582.4663 L
133.5078 582.4663 L
133.5078 586.7451 L
134.147 586.7451 L
134.147 582.4663 L
134.1475 582.4663 L
s
145.2256 597.1797 m
145.4771 596.5771 145.6001 595.8467 145.6001 594.9878 c
145.6001 593.7046 145.2988 592.7041 144.6914 591.9922 C
144.084 591.2798 143.3896 590.9189 142.6045 590.9189 c
141.3213 590.9189 140.2666 591.4717 139.4487 592.5811 C
138.627 593.686 138.0376 595.8784 137.6816 599.1621 C
136.3984 599.1621 L
135.6812 599.1621 135.0923 599.002 134.6313 598.6821 C
134.1655 598.3579 133.937 597.627 133.937 596.4858 c
133.937 595.2754 134.1333 594.417 134.5215 593.9189 C
134.9141 593.417 135.3252 593.2388 135.7544 593.3804 C
136.0376 593.5264 136.3252 593.5264 136.6084 593.3804 C
136.8965 593.2388 137.0376 592.9556 137.0376 592.5264 c
137.0376 592.2388 136.9512 592.0107 136.7729 591.8325 C
136.5947 591.6543 136.3252 591.563 135.9692 591.563 c
135.3252 591.563 134.7183 592.0288 134.1475 592.9556 C
133.5762 593.8828 133.293 595.0244 133.293 596.3809 c
133.293 597.8057 133.5625 598.8789 134.0972 599.5908 C
134.6313 600.3032 135.3979 600.6597 136.3984 600.6597 C
143.458 600.6597 L
144.0293 600.6597 144.3716 600.7139 144.4766 600.8193 C
144.5864 600.9292 144.6367 601.125 144.6367 601.4082 c
144.6367 601.7646 144.4766 602.0156 144.1567 602.1577 C
143.8374 602.3037 143.3896 602.3721 142.8193 602.3721 C
142.8193 602.9063 L
143.8188 602.9063 144.5132 602.728 144.9063 602.3721 C
145.2988 602.0156 145.4951 601.5547 145.4951 600.9839 c
145.4951 600.4814 145.3853 600.0889 145.1709 599.8057 C
144.9609 599.5181 144.6001 599.3032 144.1021 599.1621 C
144.6001 598.4492 144.979 597.7871 145.2256 597.1797 C
145.2256 597.1797 L
s
1 D
139.7686 594.1338 m
140.4443 593.2021 141.2847 592.7407 142.2852 592.7407 c
142.9238 592.7407 143.5132 592.9375 144.0474 593.3301 C
144.5864 593.7227 144.8511 594.3438 144.8511 595.2026 c
144.8511 595.8467 144.728 596.4858 144.4766 597.1294 C
144.2256 597.769 143.8511 598.4492 143.3535 599.1621 C
138.3208 599.1621 L
138.6089 596.7373 139.0879 595.061 139.7686 594.1338 C
139.7686 594.1338 L
s
134.8457 607.9937 m
135.3799 607.4551 136.2524 607.1904 137.4673 607.1904 c
138.3208 607.1904 139.0562 607.4414 139.6587 607.939 C
140.2666 608.437 140.5723 609.1172 140.5723 609.9707 c
140.5723 610.8984 140.3027 611.5967 139.7686 612.0581 C
139.2344 612.5239 138.4673 612.7568 137.4673 612.7568 c
136.2524 612.7568 135.3799 612.4873 134.8457 611.9531 C
134.3115 611.4189 134.042 610.7563 134.042 609.9707 c
134.042 609.1855 134.3115 608.5283 134.8457 607.9937 C
134.8457 607.9937 L
s
0 D
142.979 610.4551 m
143.084 611.2041 143.1758 611.8618 143.248 612.4326 C
143.3901 613.5059 143.6914 614.291 144.1567 614.7891 C
144.6187 615.2866 145.2441 615.5381 146.0293 615.5381 c
147.0981 615.5381 147.9565 615.0903 148.5957 614.1997 C
149.2397 613.3096 149.5596 611.8984 149.5596 609.9707 c
149.5596 608.4736 149.2583 607.2632 148.6509 606.3315 C
148.0435 605.4048 147.3491 604.9434 146.564 604.9434 c
146.0659 604.9434 145.564 605.1216 145.0659 605.4775 C
144.5679 605.834 144.1753 606.4043 143.8877 607.1904 C
143.6729 606.7607 143.4448 606.4229 143.1934 606.1719 C
142.9424 605.9248 142.6411 605.7974 142.2852 605.7974 c
141.8555 605.7974 141.481 605.9385 141.1611 606.2266 C
140.8374 606.5098 140.5723 606.8706 140.3579 607.2949 C
140.0015 606.8706 139.5723 606.4961 139.0747 606.1719 C
138.5723 605.8521 138.0376 605.6919 137.4673 605.6919 c
136.3984 605.6919 135.4531 606.0664 134.6313 606.8154 C
133.8096 607.5645 133.3984 608.6147 133.3984 609.9707 c
133.3984 610.542 133.4712 611.0947 133.6128 611.6333 C
133.7544 612.168 134.0054 612.6108 134.3618 612.9717 C
134.0054 613.4692 133.7407 613.9165 133.563 614.3047 C
133.3799 614.6973 133.293 615.04 133.293 615.3232 c
133.293 615.6792 133.4165 615.9307 133.6675 616.0723 C
133.9189 616.2139 134.1475 616.2866 134.3618 616.2866 c
134.6494 616.2866 134.8823 616.2319 135.0601 616.127 C
135.2383 616.0171 135.3252 615.8257 135.3252 615.5381 c
135.3252 615.3232 135.2749 615.145 135.1655 615.0034 C
135.0601 614.8618 134.896 614.7524 134.686 614.6836 C
134.4717 614.6108 134.3799 614.4507 134.4165 614.1997 c
134.4531 613.9482 134.5762 613.6841 134.7905 613.3965 C
135.0786 613.6841 135.4668 613.8984 135.9692 614.04 C
136.4668 614.1816 136.9692 614.2549 137.4673 614.2549 c
138.3208 614.2549 139.1611 613.9165 139.9834 613.2363 C
140.8008 612.5605 141.2119 611.4692 141.2119 609.9707 c
141.2119 609.5464 141.1611 609.1538 141.0518 608.793 C
140.9468 608.437 140.8188 608.1538 140.6772 607.939 C
140.8188 607.6514 140.9971 607.4414 141.2119 607.2949 C
141.4263 607.1533 141.6045 607.0806 141.7461 607.0806 c
142.0337 607.0806 142.2485 607.1533 142.3896 607.2949 C
142.5317 607.4414 142.6045 607.6514 142.6045 607.939 C
142.7461 608.8662 142.874 609.7065 142.979 610.4551 C
s
1 D
144.4766 610.7202 m
144.3716 609.8662 144.2441 608.9756 144.1021 608.0439 C
144.3901 607.4048 144.728 606.957 145.1206 606.7061 C
145.5132 606.4595 145.9932 606.3315 146.564 606.3315 c
147.1348 606.3315 147.6689 606.6558 148.1709 607.2949 C
148.6689 607.939 148.9199 608.9023 148.9199 610.186 c
148.9199 611.4004 148.7236 612.3643 148.3311 613.0767 c
147.938 613.7891 147.3491 614.145 146.564 614.145 c
146.0659 614.145 145.6733 614.0586 145.3857 613.8799 C
145.1025 613.7021 144.9243 613.4331 144.8511 613.0767 C
144.71 612.3643 144.5864 611.5786 144.4766 610.7202 C
144.4766 610.7202 L
s
138.8594 620.5703 m
138.8594 627.4204 L
137.2891 627.4888 136.0923 627.2241 135.2749 626.6167 C
134.4531 626.0093 134.042 625.2056 134.042 624.2056 c
134.042 623.1367 134.4717 622.2646 135.3252 621.584 C
136.1836 620.9082 137.3618 620.5703 138.8594 620.5703 C
138.8594 620.5703 L
s
0 D
139.499 629.2383 m
139.499 620.5703 L
141.4263 620.5703 142.8008 620.9448 143.6226 621.6938 C
144.4399 622.4429 144.8511 623.4243 144.8511 624.6348 c
144.8511 625.5615 144.5864 626.3472 144.0474 626.9912 C
143.5132 627.6304 142.856 628.0962 142.0703 628.3838 C
142.2852 628.9185 L
143.0703 628.7036 143.8374 628.2197 144.5864 627.4707 C
145.3354 626.7222 145.71 625.708 145.71 624.4204 c
145.71 622.7813 145.1709 621.4429 144.1021 620.4063 C
143.0337 619.374 141.4995 618.8579 139.499 618.8579 c
137.7183 618.8579 136.2344 619.374 135.0605 620.4063 C
133.8823 621.4429 133.293 622.708 133.293 624.2056 c
133.293 625.5615 133.7544 626.7402 134.686 627.7397 C
135.6128 628.7402 137.2158 629.2383 139.499 629.2383 C
139.499 629.2383 L
s
*U
U
u
1 D
0.75021 0.679683 0.670222 0.90164 0 0 0 XA
558.7227 477.7153 m
530.2031 437.7935 L
507.1563 395.6025 L
507.1563 373.2236 L
507.1982 373.2236 L
507.1982 373.208 L
521.2188 373.208 L
521.2188 373.2236 L
524.2188 373.2236 L
524.2188 387.5859 L
543.2109 387.5859 L
543.2109 401.7515 L
536.7813 401.7515 L
536.7813 413.0361 L
543.2109 413.0361 L
543.2109 427.0361 L
555.7813 427.0361 L
555.7813 413.0361 L
562.3516 413.0361 L
562.3516 401.7515 L
555.7813 401.7515 L
555.7813 387.5859 L
574.9844 387.5859 L
574.9844 373.2354 L
577.9063 373.2354 L
577.9063 373.2314 L
592.0664 373.2314 L
592.0664 387.4932 L
592.0547 387.4932 L
592.0547 387.5859 L
592.0664 387.5859 L
592.0664 401.6685 L
591.9688 401.6685 L
581.6133 461.3755 L
558.7227 477.7153 L
558.7227 477.7153 L
s
0 D
0.883665 0.769161 0 0 0 0 1 XA
570.3047 451.5205 m
572.8984 449.6416 L
564.4375 437.9653 L
561.8438 439.8442 L
570.3047 451.5205 L
s
1 J 1 j34.6758 547.3477 m
37.1143 549.7861 41.0591 549.7852 43.4971 547.3472 c
45.9302 544.9141 45.9312 540.9653 43.4971 538.5313 C
41.0601 536.0942 37.1143 536.0942 34.6772 538.5313 C
32.2432 540.9648 32.2417 544.9141 34.6758 547.3477 C
34.6758 547.3477 L
s
1 D
0 J 0 j64.5479 534.48 m
81.8247 534.48 L
81.8247 551.3936 L
64.5479 551.3936 L
64.5479 534.48 L
s
-3.38184 534.48 m
13.895 534.48 L
13.895 551.3936 L
-3.38184 551.3936 L
-3.38184 534.48 L
s
0 D
1 J 1 j34.6758 629.3398 m
37.1143 631.7783 41.063 631.7769 43.4961 629.3398 C
45.9341 626.9063 45.9351 622.957 43.4971 620.5234 C
41.064 618.0859 37.1143 618.0859 34.6772 620.5234 C
32.2432 622.957 32.2432 626.9072 34.6758 629.3398 C
s
1 D
0 J 0 j64.5508 616.4731 m
81.8242 616.4731 L
81.8242 633.3906 L
64.5508 633.3906 L
64.5508 616.4731 L
s
-3.37793 616.4731 m
13.895 616.4731 L
13.895 633.3906 L
-3.37793 633.3906 L
-3.37793 616.4731 L
s
0 D
0.75021 0.679683 0.670222 0.90164 0 0 0 XA
635.9014 477.2192 m
664.4219 437.2974 L
687.4688 395.1064 L
687.4688 372.7227 L
687.4219 372.7227 L
687.4219 372.708 L
673.4053 372.708 L
673.4053 372.7227 L
670.4053 372.7227 L
670.4053 387.0859 L
651.4131 387.0859 L
651.4131 401.251 L
657.8438 401.251 L
657.8438 412.54 L
651.4131 412.54 L
651.4131 426.54 L
638.8438 426.54 L
638.8438 412.54 L
632.2725 412.54 L
632.2725 401.251 L
638.8438 401.251 L
638.8438 387.0859 L
619.6406 387.0859 L
619.6406 372.7354 L
602.5547 372.7354 L
602.5547 386.9932 L
602.5654 386.9932 L
602.5654 387.0859 L
602.5547 387.0859 L
602.5547 401.1685 L
602.6514 401.1685 L
613.0078 460.8794 L
635.9014 477.2192 L
635.9014 477.2192 L
s
1 D
0.883665 0.769161 0 0 0 0 1 XA
624.3154 451.0239 m
621.7266 449.1416 L
630.1865 437.4653 L
632.7803 439.3481 L
624.3154 451.0239 L
s
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
